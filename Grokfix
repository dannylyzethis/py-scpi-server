#!/usr/bin/env python3
"""
SCPI Equipment Emulator - VERSION 2.3
ADDED: Web Dashboard with real-time monitoring and control

New Features:
- Web dashboard on http://localhost:8081
- Real-time command/response monitoring
- Remote instrument control
- Performance metrics visualization
- Configuration upload via web interface
"""

import csv
import socket
import threading
import time
import argparse
import sys
import re
import logging
import signal
import json
from pathlib import Path
from datetime import datetime
import traceback
from collections import deque
import os
import resource  # For basic memory fallback if psutil not available

# Flask imports
try:
    from flask import Flask, render_template, jsonify, request, send_from_directory
    from flask_socketio import SocketIO, emit
    HAS_FLASK = True
except ImportError:
    HAS_FLASK = False
    print("Flask not installed. Web dashboard will be disabled.")
    print("Install with: pip install flask flask-socketio")

# Try psutil for better memory stats
try:
    import psutil
    HAS_PSUTIL = True
except ImportError:
    HAS_PSUTIL = False
    print("psutil not installed. Memory usage metric will be approximate.")
    print("Install with: pip install psutil")

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('scpi_emulator.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class CommandLogger:
    """Tracks commands and responses for web dashboard"""
    
    def __init__(self, max_entries=1000):
        self.entries = deque(maxlen=max_entries)
        self.response_times = deque(maxlen=1000)  # Track recent response times
        self.stats = {
            'total_commands': 0,
            'commands_per_minute': 0,
            'last_minute_commands': deque(maxlen=60),
            'errors': 0,
            'start_time': time.time()
        }
        self.lock = threading.Lock()
    
    def log_command(self, instrument_name, command, response, error=None, elapsed=0):
        """Log a command/response pair"""
        timestamp = time.time()
        
        with self.lock:
            entry = {
                'timestamp': timestamp,
                'time_str': datetime.fromtimestamp(timestamp).strftime('%H:%M:%S'),
                'instrument': instrument_name,
                'command': command,
                'response': response,
                'error': error,
                'is_error': error is not None
            }
            
            self.entries.append(entry)
            self.stats['total_commands'] += 1
            self.response_times.append(elapsed)
            
            if error:
                self.stats['errors'] += 1
            
            # Update commands per minute
            current_minute = int(timestamp // 60)
            self.stats['last_minute_commands'].append(current_minute)
            
            # Calculate commands per minute
            if len(self.stats['last_minute_commands']) > 1:
                minutes_span = max(1, len(set(self.stats['last_minute_commands'])))
                self.stats['commands_per_minute'] = len(self.stats['last_minute_commands']) / minutes_span
    
    def get_recent_entries(self, limit=50):
        """Get recent command entries"""
        with self.lock:
            return list(self.entries)[-limit:]
    
    def get_stats(self):
        """Get system statistics"""
        with self.lock:
            uptime = time.time() - self.stats['start_time']
            avg_response = sum(self.response_times) / len(self.response_times) if self.response_times else 0
            avg_response_ms = round(avg_response * 1000, 2)  # ms
            
            # Memory usage
            if HAS_PSUTIL:
                process = psutil.Process(os.getpid())
                memory_mb = round(process.memory_info().rss / (1024 * 1024), 1)
            else:
                memory_mb = round(resource.getrusage(resource.RUSAGE_SELF).ru_maxrss / 1024, 1)  # Approximate
            
            return {
                'total_commands': self.stats['total_commands'],
                'commands_per_minute': round(self.stats['commands_per_minute'], 1),
                'errors': self.stats['errors'],
                'uptime': round(uptime),
                'uptime_str': str(datetime.fromtimestamp(uptime) - datetime.fromtimestamp(0)).split('.')[0],
                'avg_response_time': avg_response_ms,
                'memory_usage': memory_mb
            }

# Global command logger instance
command_logger = CommandLogger()

# ... (The rest of ExcelReader, SCPIInstrument, SCPIServer classes remain unchanged)

class WebDashboard:
    """Flask-based web dashboard for SCPI emulator"""
    
    def __init__(self, emulator_manager, host='0.0.0.0', port=8081):
        if not HAS_FLASK:
            logger.error("Flask not available. Web dashboard disabled.")
            return
            
        self.manager = emulator_manager
        self.host = host
        self.port = port
        
        # Create Flask app
        self.app = Flask(__name__)
        self.app.config['SECRET_KEY'] = 'scpi_emulator_secret_key'
        self.socketio = SocketIO(self.app, cors_allowed_origins="*")
        
        self._setup_routes()
        self._setup_socketio()
        
    def _setup_routes(self):
        """Setup Flask routes"""
        
        @self.app.route('/')
        def dashboard():
            return render_template('dashboard.html')
        
        @self.app.route('/api/status')
        def api_status():
            """Get system status"""
            instruments = []
            for inst_id, inst_data in self.manager.instruments.items():
                instrument = inst_data['instrument']
                port = inst_data['port']
                server = self.manager.servers.get(inst_id)
                
                instruments.append({
                    'id': inst_id,
                    'name': instrument.name,
                    'port': port,
                    'running': server is not None and server.running,
                    'clients': len(server.clients) if server else 0,
                    'commands': instrument.command_count,
                    'errors': len(instrument.error_queue),
                    'state': dict(instrument.state)
                })
            
            return jsonify({
                'instruments': instruments,
                'stats': command_logger.get_stats(),
                'system': {
                    'total_instruments': len(self.manager.instruments),
                    'running_servers': len(self.manager.servers),
                    'timestamp': time.time()
                }
            })
        
        @self.app.route('/api/commands')
        def api_commands():
            """Get recent commands"""
            return jsonify(command_logger.get_recent_entries())
        
        @self.app.route('/api/restart/<instrument_id>', methods=['POST'])
        def api_restart_instrument(instrument_id):
            """Restart a specific instrument"""
            try:
                if instrument_id in self.manager.servers:
                    server = self.manager.servers[instrument_id]
                    server.stop()
                    time.sleep(0.5)
                    
                    if server.start():
                        return jsonify({'status': 'success', 'message': f'Restarted {instrument_id}'})
                    else:
                        return jsonify({'status': 'error', 'message': f'Failed to restart {instrument_id}'}), 500
                else:
                    return jsonify({'status': 'error', 'message': f'Instrument {instrument_id} not found'}), 404
                    
            except Exception as e:
                return jsonify({'status': 'error', 'message': str(e)}), 500
        
        @self.app.route('/api/stop_all', methods=['POST'])
        def api_stop_all():
            """Stop all instruments"""
            try:
                self.manager.stop_all_servers()
                return jsonify({'status': 'success', 'message': 'All servers stopped'})
            except Exception as e:
                return jsonify({'status': 'error', 'message': str(e)}), 500
        
        @self.app.route('/api/start_all', methods=['POST'])
        def api_start_all():
            """Start all instruments"""
            try:
                if self.manager.start_all_servers():
                    return jsonify({'status': 'success', 'message': 'All servers started'})
                else:
                    return jsonify({'status': 'error', 'message': 'Failed to start some servers'}), 500
            except Exception as e:
                return jsonify({'status': 'error', 'message': str(e)}), 500
        
        @self.app.route('/api/send_command/<instrument_id>', methods=['POST'])
        def api_send_command(instrument_id):
            try:
                if instrument_id not in self.manager.servers:
                    return jsonify({'status': 'error', 'message': f'Instrument {instrument_id} not found'}), 404
                command = request.json.get('command', '').strip()
                if not command:
                    return jsonify({'status': 'error', 'message': 'No command provided'}), 400
                
                server = self.manager.servers[instrument_id]
                start_time = time.time()
                response = server.instrument.process_command(command)
                elapsed = time.time() - start_time
                
                error = None
                if server.instrument.error_queue:
                    error = server.instrument.error_queue[-1]
                
                command_logger.log_command(
                    server.instrument.name, 
                    command, 
                    response or '(no response)', 
                    error,
                    elapsed
                )
                
                self.emit_command_update(
                    server.instrument.name, 
                    command, 
                    response or '(no response)', 
                    error
                )
                
                return jsonify({'status': 'success', 'message': 'Command sent', 'response': response, 'error': error})
            except Exception as e:
                return jsonify({'status': 'error', 'message': str(e)}), 500
        
        @self.app.route('/api/upload_config', methods=['POST'])
        def api_upload_config():
            """Handle config file upload and load"""
            try:
                if 'file' not in request.files:
                    return jsonify({'status': 'error', 'message': 'No file uploaded'}), 400
                
                file = request.files['file']
                if file.filename == '':
                    return jsonify({'status': 'error', 'message': 'No file selected'}), 400
                
                # Save to temp file
                temp_dir = Path('temp_uploads')
                temp_dir.mkdir(exist_ok=True)
                temp_path = temp_dir / file.filename
                file.save(temp_path)
                
                # Check if servers were running
                was_running = self.manager.running
                
                # Stop if running
                if was_running:
                    self.manager.stop_all_servers()
                
                # Load new config
                loaded = self.manager.load_from_file(str(temp_path))
                
                # Clean up
                temp_path.unlink()
                
                if loaded:
                    # Restart if previously running
                    if was_running:
                        self.manager.start_all_servers()
                    return jsonify({'status': 'success', 'message': 'Config loaded successfully'})
                else:
                    return jsonify({'status': 'error', 'message': 'Failed to load config file'}), 500
                
            except Exception as e:
                logger.error(f"Upload error: {e}")
                return jsonify({'status': 'error', 'message': str(e)}), 500

    
    def _setup_socketio(self):
        """Setup WebSocket events for real-time updates"""
        
        @self.socketio.on('connect')
        def handle_connect():
            logger.info("Web client connected")
        
        @self.socketio.on('disconnect')
        def handle_disconnect():
            logger.info("Web client disconnected")
    
    def emit_command_update(self, instrument_name, command, response, error=None):
        """Emit real-time command update to web clients"""
        if hasattr(self, 'socketio'):
            self.socketio.emit('command_update', {
                'timestamp': time.time(),
                'time_str': datetime.fromtimestamp(time.time()).strftime('%H:%M:%S'),
                'instrument': instrument_name,
                'command': command,
                'response': response,
                'error': error
            })
    
    def start(self):
        """Start the web dashboard"""
        if not HAS_FLASK:
            logger.warning("Flask not available. Web dashboard not started.")
            return False
            
        try:
            logger.info(f"Starting web dashboard on http://{self.host}:{self.port}")
            
            # Start in a separate thread
            dashboard_thread = threading.Thread(
                target=lambda: self.socketio.run(
                    self.app, 
                    host=self.host, 
                    port=self.port, 
                    debug=False,
                    allow_unsafe_werkzeug=True
                ),
                daemon=True
            )
            dashboard_thread.start()
            
            # Give it a moment to start
            time.sleep(1)
            logger.info(f" Web dashboard started! Open: http://localhost:{self.port}")
            return True
            
        except Exception as e:
            logger.error(f"Failed to start web dashboard: {e}")
            return False

# ... (The rest of SCPIEmulatorManager, create_example_csv, create_dashboard_template, main remain unchanged, but update create_dashboard_template with the fixed HTML below)

def create_dashboard_template():
    """Create the HTML template for the dashboard"""
    template_dir = os.path.join(os.path.dirname(__file__), 'templates')
    os.makedirs(template_dir, exist_ok=True)
    
    template_path = os.path.join(template_dir, 'dashboard.html')
    
    if not os.path.exists(template_path):
        # Updated template with fixes
        template_content = """\
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SCPI Emulator Dashboard</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.0/socket.io.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>  <!-- Added Tailwind CSS CDN for utility classes -->
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
            color: #2c3e50;
        }
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, #2c3e50, #3498db);
            color: white;
            padding: 20px 30px;
            border-bottom: 3px solid #e74c3c;
        }
        .header h1 {
            margin: 0;
            font-size: 2em;
            font-weight: 300;
        }
        .header .status {
            margin-top: 8px;
            opacity: 0.9;
        }
        .main-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            padding: 30px;
        }
        .panel {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.05);
            border: 1px solid #e9ecef;
        }
        .panel h3 {
            color: #2c3e50;
            margin-bottom: 15px;
            font-size: 1.3em;
            border-bottom: 2px solid #3498db;
            padding-bottom: 8px;
        }
        .instruments-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            grid-column: 1 / -1;
        }
        .instrument-card {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 3px 10px rgba(0,0,0,0.1);
            border-left: 4px solid #27ae60;
            transition: transform 0.2s ease;
        }
        .instrument-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 20px rgba(0,0,0,0.15);
        }
        .instrument-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        .instrument-name {
            font-weight: 600;
            font-size: 1.1em;
        }
        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #27ae60;
            box-shadow: 0 0 10px rgba(39, 174, 96, 0.5);
            animation: pulse 2s infinite;
        }
        .status-indicator.stopped {
            background: #e74c3c;
            box-shadow: 0 0 10px rgba(231, 76, 60, 0.5);
        }
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        .instrument-info {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-bottom: 15px;
            font-size: 0.9em;
        }
        .info-item {
            display: flex;
            justify-content: space-between;
        }
        .info-label {
            color: #7f8c8d;
            font-weight: 500;
        }
        .info-value {
            color: #2c3e50;
            font-weight: 600;
        }
        .recent-commands {
            max-height: 120px;
            overflow-y: auto;
            background: #f8f9fa;
            border-radius: 5px;
            padding: 10px;
        }
        .command-entry {
            font-family: 'Courier New', monospace;
            font-size: 0.8em;
            margin-bottom: 5px;
            padding: 5px;
            background: white;
            border-radius: 3px;
            border-left: 3px solid #3498db;
            opacity: 0;
            transform: translateY(10px);
            transition: all 0.3s ease;
        }
        .command-entry.animate {
            opacity: 1;
            transform: translateY(0);
        }
        .command {
            color: #e74c3c;
            font-weight: bold;
        }
        .response {
            color: #27ae60;
            margin-left: 10px;
        }
        .metrics {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
        }
        .metric-card {
            text-align: center;
            padding: 15px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        .metric-value {
            font-size: 2em;
            font-weight: bold;
            color: #3498db;
            display: block;
        }
        .metric-label {
            color: #7f8c8d;
            font-size: 0.9em;
            margin-top: 5px;
        }
        .console {
            background: #2c3e50;
            color: #ecf0f1;
            border-radius: 5px;
            padding: 15px;
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
            max-height: 300px;
            overflow-y: auto;
            line-height: 1.4;
        }
        .console-line {
            margin-bottom: 5px;
            opacity: 0;
            transform: translateY(10px);
            transition: all 0.3s ease;
        }
        .console-line.animate {
            opacity: 1;
            transform: translateY(0);
        }
        .timestamp {
            color: #95a5a6;
            margin-right: 10px;
        }
        .log-info {
            color: #3498db;
        }
        .log-warning {
            color: #f39c12;
        }
        .log-error {
            color: #e74c3c;
        }
        .log-success {
            color: #27ae60;  /* Added for log-success coloring */
        }
        .controls {
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
        }
        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s ease;
            text-decoration: none;
            display: inline-block;
        }
        .btn-primary {
            background: #3498db;
            color: white;
        }
        .btn-primary:hover {
            background: #2980b9;
            transform: translateY(-1px);
        }
        .btn-success {
            background: #27ae60;
            color: white;
        }
        .btn-success:hover {
            background: #219653;
            transform: translateY(-1px);
        }
        .btn-danger {
            background: #e74c3c;
            color: white;
        }
        .btn-danger:hover {
            background: #c0392b;
            transform: translateY(-1px);
        }
        .btn-warning {
            background: #f39c12;
            color: white;
        }
        .btn-warning:hover {
            background: #e67e22;
            transform: translateY(-1px);
        }
        .config-section {
            margin-top: 20px;
        }
        .config-upload {
            display: flex;
            gap: 10px;
            align-items: center;
        }
        .file-input {
            flex: 1;
            padding: 8px;
            border: 2px dashed #bdc3c7;
            border-radius: 5px;
            text-align: center;
            cursor: pointer;
            transition: border-color 0.2s ease;
        }
        .file-input:hover {
            border-color: #3498db;
        }
        .scrollbar-custom::-webkit-scrollbar {
            width: 8px;
        }
        .scrollbar-custom::-webkit-scrollbar-track {
            background: #2d3748;
            border-radius: 4px;
        }
        .scrollbar-custom::-webkit-scrollbar-thumb {
            background: #4a5568;
            border-radius: 4px;
        }
        .scrollbar-custom::-webkit-scrollbar-thumb:hover {
            background: #718096;
        }
        /* Added for Tailwind compatibility if needed, but CDN handles most */
        .mt-2 {
            margin-top: 0.5rem;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🔬 SCPI Emulator Dashboard</h1>
            <div class="status" id="status">Loading system status...</div>
        </div>

        <div class="main-content">
            <!-- System Overview Panel -->
            <div class="panel">
                <h3>📊 System Metrics</h3>
                <div class="metrics" id="metrics">
                    <div class="metric-card">
                        <span class="metric-value" id="total-commands">0</span>
                        <div class="metric-label">Commands/min</div>
                    </div>
                    <div class="metric-card">
                        <span class="metric-value" id="response-time">--</span>
                        <div class="metric-label">Avg Response (ms)</div>
                    </div>
                    <div class="metric-card">
                        <span class="metric-value" id="memory-usage">--</span>
                        <div class="metric-label">Memory (MB)</div>
                    </div>
                </div>

                <div class="config-section">
                    <h4>⚙️ Configuration</h4>
                    <div class="controls">
                        <button class="btn btn-primary" onclick="refreshStatus()">📁 Refresh</button>
                        <button class="btn btn-success" onclick="startAll()">▶️ Start All</button>
                        <button class="btn btn-warning" onclick="alert('Pause not implemented')">⏸️ Pause</button>
                        <button class="btn btn-danger" onclick="stopAll()">⏹️ Stop All</button>
                    </div>

                    <div class="config-upload">
                        <input type="file" id="configFile" accept=".csv,.xlsx,.xls" class="file-input scrollbar-custom">
                        <button class="btn btn-primary" onclick="uploadConfig()">Upload</button>
                    </div>
                    <p id="uploadResponse" class="mt-2"></p>
                </div>

                <div class="config-section">
                    <h4>📡 Send SCPI Command</h4>
                    <div class="controls">
                        <select id="instrumentSelect" class="border border-gray-300 rounded px-3 py-2">
                            <option value="">Select Instrument</option>
                        </select>
                        <input id="commandInput" type="text" placeholder="Enter SCPI command (e.g., *IDN?)" class="border border-gray-300 rounded px-3 py-2 flex-grow">
                        <button class="btn btn-primary" onclick="sendCommand()">Send</button>
                    </div>
                    <p id="commandResponse" class="mt-2"></p>
                </div>
            </div>

            <!-- Live Console Panel -->
            <div class="panel">
                <h3>🖥️ Live Console</h3>
                <div class="console scrollbar-custom" id="commands"></div>
            </div>

            <!-- Instruments Grid -->
            <div class="instruments-grid" id="instruments"></div>
        </div>
    </div>

    <script>
        const socket = io();

        // Populate instrument dropdown
        function updateInstrumentSelect(instruments) {
            const select = document.getElementById('instrumentSelect');
            select.innerHTML = '<option value="">Select Instrument</option>';
            instruments.forEach(inst => {
                const option = document.createElement('option');
                option.value = inst.id;
                option.textContent = `${inst.name} (Port ${inst.port})`;
                select.appendChild(option);
            });
        }

        // Update status, metrics, and instruments
        function updateStatus(data) {
            document.getElementById('status').innerHTML = `
                <span>🟢 ${data.system.running_servers} instruments running</span> •
                <span>⚡ ${data.stats.total_commands.toLocaleString()} commands processed</span> •
                <span>📊 ${data.stats.errors} errors</span>
            `;
            document.getElementById('total-commands').textContent = data.stats.commands_per_minute.toFixed(1);
            document.getElementById('response-time').textContent = data.stats.avg_response_time;
            document.getElementById('memory-usage').textContent = data.stats.memory_usage;

            const instrumentsHtml = data.instruments.map(inst => {
                const recentCommands = data.commands
                    .filter(cmd => cmd.instrument === inst.name)
                    .slice(-3)
                    .map(cmd => `
                        <div class="command-entry animate">
                            <span class="command">${cmd.command}</span>
                            <span class="response">→ ${cmd.response}${cmd.error ? ` <span class="log-error">(${cmd.error})</span>` : ''}</span>
                        </div>
                    `).join('');
                return `
                    <div class="instrument-card">
                        <div class="instrument-header">
                            <div class="instrument-name">🔍 ${inst.name}</div>
                            <div class="status-indicator ${inst.running ? '' : 'stopped'}"></div>
                        </div>
                        <div class="instrument-info">
                            <div class="info-item">
                                <span class="info-label">Port:</span>
                                <span class="info-value">${inst.port}</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Clients:</span>
                                <span class="info-value">${inst.clients} connected</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Commands:</span>
                                <span class="info-value">${inst.commands} total</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Errors:</span>
                                <span class="info-value">${inst.errors}</span>
                            </div>
                        </div>
                        <div class="recent-commands scrollbar-custom">
                            ${recentCommands || '<div class="command-entry">No recent commands</div>'}
                        </div>
                        <button class="btn btn-warning" onclick="restartInstrument('${inst.id}')">🔄 Restart</button>
                    </div>
                `;
            }).join('');
            document.getElementById('instruments').innerHTML = instrumentsHtml;
        }

        // ... (The rest of the JavaScript remains unchanged)
    </script>
</body>
</html>
"""
        
        with open(template_path, 'w', encoding='utf-8') as f:
            f.write(template_content)
        
        logger.info(f"Created dashboard template: {template_path}")

# ... (main function and if __name__ == "__main__" remain unchanged)
